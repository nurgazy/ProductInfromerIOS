import SwiftUI

// üí° –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –≤—Å–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö (ProductResponse, Nomenclature, Characteristic, Stock, Price) –¥–æ—Å—Ç—É–ø–Ω—ã –≤ —ç—Ç–æ–º —Ñ–∞–π–ª–µ –∏–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã.

struct ProductDetailView: View {
    
    // 1. –í—Ö–æ–¥: –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—ã—Ä—É—é —Å—Ç—Ä–æ–∫—É JSON, –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é —á–µ—Ä–µ–∑ –Ω–∞–≤–∏–≥–∞—Ü–∏—é
    let productString: String
    
    // 2. –°–æ—Å—Ç–æ—è–Ω–∏–µ: –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
    @State private var decodedProduct: ProductResponse?
    @State private var decodingError: String?
    
    var body: some View {
        Group {
            if let product = decodedProduct {
                TabView {
                    FullProductDetailList(product: product)
                        .tabItem {
                            Label("–î–µ—Ç–∞–ª–∏", systemImage: "list.bullet")
                        }
                    
                    ProductImageTab(imageString: product.image, productName: product.nomenclature.name)
                        .tabItem {
                            Label("–ö–∞—Ä—Ç–∏–Ω–∫–∞", systemImage: "photo")
                        }
                }
            } else if let error = decodingError {
                // ‚ùå –û—à–∏–±–∫–∞: –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
                ErrorView(error: error, rawData: productString)
            } else {
                // ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ: –ó–∞–ø—É—Å–∫ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –ø–æ—è–≤–ª–µ–Ω–∏–∏
                ProgressView("–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
            }
        }
        .onAppear {
            // –ó–∞–ø—É—Å–∫ –ª–æ–≥–∏–∫–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
            decodeProductData()
        }
    }
    
    // 3. –õ–æ–≥–∏–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
    private func decodeProductData() {
        // –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
        guard decodedProduct == nil && decodingError == nil else { return }

        guard let data = productString.data(using: .utf8) else {
            decodingError = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É –≤ Data."
            return
        }
        
        do {
            let decoder = JSONDecoder()
            let response = try decoder.decode(ProductResponse.self, from: data)
            
            if response.result {
                self.decodedProduct = response
            } else {
                // –°–µ—Ä–≤–µ—Ä 1–° –≤–µ—Ä–Ω—É–ª result: false
                self.decodingError = "–°–µ—Ä–≤–µ—Ä 1–°: –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω (result: false)."
            }
        } catch {
            // –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ JSON –∏–ª–∏ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–∏–ø–æ–≤
            self.decodingError = "–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: \(error.localizedDescription).\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –ª–∏ –º–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã–º."
            print("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: \(error)")
        }
    }
}

// –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å List
struct FullProductDetailList: View {
    
    let product: ProductResponse
    
    var body: some View {
        List {
            nomenclatureSection
            characteristicsSection
        }
        .listStyle(.insetGrouped)
    }
    
    var nomenclatureSection: some View {
        Section(header: Text(product.nomenclature.name).font(.headline)) {
            DetailRow(label: "–®—Ç—Ä–∏—Ö–∫–æ–¥", value: product.nomenclature.barcode)
            DetailRow(label: "–ê—Ä—Ç–∏–∫—É–ª", value: product.nomenclature.article ?? "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
            DetailRow(label: "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å", value: product.nomenclature.manufacturer ?? "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
            DetailRow(label: "–ú–∞—Ä–∫–∞", value: product.nomenclature.brand ?? "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
            DetailRow(label: "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", value: product.nomenclature.productCategory ?? "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        }
    }
    
    var characteristicsSection: some View {
        // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–µ—Ä–µ–±–æ—Ä –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
        ForEach(product.characteristics ?? [], id: \.uuid1C) { characteristic in
            CharacteristicDetailSection(characteristic: characteristic)
        }
    }
}

struct ProductImageTab: View {
    let imageString: String?
    let productName: String
    
    @State private var uiImage: UIImage? = nil
    
    var body: some View {
        VStack {
            if let image = uiImage {
                Image(uiImage: image)
                    .resizable()
                    .aspectRatio(contentMode: .fit)
                    .frame(maxWidth: .infinity, maxHeight: .infinity)
                    .padding()
            } else if imageString == nil || imageString!.isEmpty {
                if #available(iOS 17.0, *){
                    ContentUnavailableView(
                        "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
                        systemImage: "photo.slash",
                        description: Text("–î–∞–Ω–Ω—ã–µ –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã —Å–µ—Ä–≤–µ—Ä–æ–º.")
                    )
                }
                else{
                    VStack(spacing: 10) {
                        Image(systemName: "photo.slash")
                            .font(.largeTitle)
                            .foregroundColor(.gray)
                        Text("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                            .font(.headline)
                        Text("–î–∞–Ω–Ω—ã–µ –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã —Å–µ—Ä–≤–µ—Ä–æ–º.")
                            .font(.subheadline)
                            .foregroundColor(.secondary)
                    }
                    .padding()
                }
            } else {
                ProgressView("–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
            }
        }
        .onAppear {
            loadImage()
        }
    }
    
    // –õ–æ–≥–∏–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è Base64
    private func loadImage() {
        guard let base64String = imageString, !base64String.isEmpty else { return }
        
        // –í –≤–∞—à–µ–º –ø—Ä–∏–º–µ—Ä–µ JSON —Å—Ç—Ä–æ–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "/9j/...", —á—Ç–æ —è–≤–ª—è–µ—Ç—Å—è –Ω–∞—á–∞–ª–æ–º
        // Base64-–∫–æ–¥–∏—Ä–æ–≤–∫–∏ JPEG-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
        
        // 1. –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ Base64 —Å—Ç—Ä–æ–∫–∏ –≤ Data
        if let data = Data(base64Encoded: base64String, options: .ignoreUnknownCharacters) {
            // 2. –°–æ–∑–¥–∞–Ω–∏–µ UIImage –∏–∑ Data
            if let image = UIImage(data: data) {
                self.uiImage = image
                return
            }
        }
        
        // –ï—Å–ª–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –±—ã–ª–∞ –ø—É—Ç—ë–º, –∞ –Ω–µ Base64)
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å Base64-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
    }
}

// –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—à–∏–±–æ–∫
struct ErrorView: View {
    let error: String
    let rawData: String
    
    var body: some View {
        ScrollView {
            VStack(alignment: .leading, spacing: 20) {
                Text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
                    .font(.title2)
                    .foregroundColor(.red)
                
                Text(error)
                    .font(.body)
                    .padding()
                    .background(Color.red.opacity(0.1))
                    .cornerRadius(8)
                
                Text("–°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ (JSON):")
                    .font(.headline)
                
                Text(rawData)
                    .font(.caption)
                    .foregroundColor(.secondary)
                    .textSelection(.enabled)
                
                Spacer()
            }
            .padding()
        }
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è –¥–µ—Ç–∞–ª–µ–π
struct CharacteristicDetailSection: View {
    let characteristic: Characteristic
    
    @State private var isStocksExpanded: Bool = true // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Ç–∫—Ä—ã—Ç–æ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    @State private var isPricesExpanded: Bool = true
    
    var body: some View {
        Section(header: Text("\(characteristic.name)").font(.headline)) {

            DisclosureGroup("–û—Å—Ç–∞—Ç–∫–∏ (–í –Ω–∞–ª–∏—á–∏–∏/–î–æ—Å—Ç—É–ø–Ω–æ)", isExpanded: $isStocksExpanded) {
                ForEach(characteristic.stocks ?? [], id: \.warehouse) { stock in
                    StockDetailRow(stock: stock)
                }
                if ((characteristic.stocks?.isEmpty) == nil) {
                    Text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö.").foregroundColor(.gray)
                }
            }
            
            DisclosureGroup("–¶–µ–Ω—ã", isExpanded: $isPricesExpanded) {
                ForEach(characteristic.prices ?? [], id: \.priceType) { price in
                    PriceDetailRow(price: price)
                }
                if ((characteristic.prices?.isEmpty) == nil) {
                    Text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–∞—Ö.").foregroundColor(.gray)
                }
            }
        }
    }
}

struct StockDetailRow: View {
    let stock: Stock
    
    var body: some View {
        HStack(spacing: 5) {
            Text("–°–∫–ª–∞–¥: \(stock.warehouse)").font(.subheadline).bold()
            Spacer()
            Text("\(stock.inStock) / \(stock.available)")
        }
        .padding(.vertical, 5)
    }
}

struct PriceDetailRow: View {
    let price: Price
    
    var body: some View {
        HStack {
            Text("\(price.priceType): ")
            Spacer()
            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É –¥–æ –¥–≤—É—Ö –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
            Text(String(format: "%.2f %@", price.price, price.currency))
                .fontWeight(.medium)
                .foregroundColor(.green)
        }
        .padding(.vertical, 5)
    }
}

struct DetailRow: View {
    let label: String
    let value: String
    
    var body: some View {
        HStack {
            Text(label)
                .foregroundColor(.gray)
            Spacer()
            Text(value)
                .multilineTextAlignment(.trailing)
        }
    }
}
