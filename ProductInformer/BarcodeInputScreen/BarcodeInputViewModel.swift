import Foundation
import SwiftUI
import Combine
import SwiftKeychainWrapper

struct ConnectionSettings {
    let protocolSelection: String
    let serverAddress: String
    let port: Int
    let publicationName: String
    let username: String
    let password: String
    let isFullSpecific: Bool
}

final class BarcodeInputViewModel: ObservableObject {
    
    @Published var isSearching: Bool = false
    @Published var isActiveLink: Bool = false      // –î–ª—è iOS 15-
    
    @Published var barcode: String = ""
    @Published var isScanning: Bool = false
    @Published var scannedCode: String? = nil
    @Published var statusMessage: String = ""
    
    @Published var showingAlert: Bool = false
    @Published var alertMessage: String = ""
    
    private var connectionSettings: ConnectionSettings
    private var coordinatorPath: Binding<NavigationPath?>
    
    init(coordinatorPath: Binding<NavigationPath?>) {
        self.coordinatorPath = coordinatorPath // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–≤—è–∑–∫—É
        self.connectionSettings = BarcodeInputViewModel.loadConnectionSettings()
    }
    
    private static func loadConnectionSettings() -> ConnectionSettings {
        let defaults = UserDefaults.standard
        
        let protocolSelection = defaults.string(forKey: SettingKeys.protocolSelection) ?? "HTTPS"
        let serverAddress = defaults.string(forKey: SettingKeys.serverAddress) ?? ""
        let savedPort = defaults.integer(forKey: SettingKeys.port)
        let port = savedPort > 0 ? savedPort : 443
        let publicationName = defaults.string(forKey: SettingKeys.publicationName) ?? ""
        let username = defaults.string(forKey: SettingKeys.username) ?? ""
        
        // üîë –ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞—Ä–æ–ª—è –∏–∑ Keychain
        let password = KeychainWrapper.standard.string(forKey: SettingKeys.password) ?? ""
        
        let isFullSpecific = defaults.bool(forKey: SettingKeys.isFullSpecific)
        
        return ConnectionSettings(
            protocolSelection: protocolSelection,
            serverAddress: serverAddress,
            port: port,
            publicationName: publicationName,
            username: username,
            password: password,
            isFullSpecific: isFullSpecific
        )
    }
    
    // –õ–æ–≥–∏–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏
    func handleScanResult(result: Result<String, CodeScannerView.ScannerError>) {
        isScanning = false // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–∫–∞–Ω–µ—Ä–∞
        switch result {
        case .success(let code):
            self.barcode = code
            // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–∞
            findProduct()
        case .failure(let error):
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            self.alertMessage = "–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: \(error.localizedDescription)"
            self.showingAlert = true
        }
    }
    
    // –õ–æ–≥–∏–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–π—Ç–∏"
    func findProduct() {
        
        guard !barcode.isEmpty else {
            self.alertMessage =  "‚ùå –í–≤–µ–¥–∏—Ç–µ –∏–ª–∏ –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ —à—Ç—Ä–∏—Ö–∫–æ–¥."
            self.showingAlert = true
            return
        }
        
        guard let url = buildSearchURL(barcode: barcode) else {
            self.alertMessage =  "‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL."
            self.showingAlert = true
            return
        }
        
        self.statusMessage = "üîç –ü–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–∞ \(barcode) –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ..."
        
        // 1. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
        var request = URLRequest(url: url)
        request.httpMethod = "GET"
        
        let authString = "\(connectionSettings.username):\(connectionSettings.password)"
        if let data = authString.data(using: .utf8) {
            let base64Auth = data.base64EncodedString()
            request.setValue("Basic \(base64Auth)", forHTTPHeaderField: "Authorization")
        }
        
        // 2. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        Task {
            
            await MainActor.run {
                self.isSearching = true
                self.showingAlert = false
                self.alertMessage = ""
            } // üü¢ START LOADING
            
            defer {
                Task { @MainActor in self.isSearching = false } // üü¢ END LOADING
            }

            do {
                let (data, response) = try await URLSession.shared.data(for: request)
                guard let httpResponse = response as? HTTPURLResponse else {
                    throw URLError(.badServerResponse)
                }
                
                // 3. –ü–æ–ª—É—á–∞–µ–º —Å—ã—Ä—É—é —Å—Ç—Ä–æ–∫—É JSON
                guard let jsonString = String(data: data, encoding: .utf8) else {
                    await MainActor.run {
                        self.alertMessage = "‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –∫–∞–∫ —Ç–µ–∫—Å—Ç."
                        self.showingAlert = true
                    }
                    return
                }
                
                await MainActor.run {
                    if httpResponse.statusCode == 200 {
                        self.navigateToProductDetail(productString: jsonString)
                        
                    } else if httpResponse.statusCode == 401 {
                        self.alertMessage = "‚ùå –û—à–∏–±–∫–∞ 401: –ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å/–ø–∞—Ä–æ–ª—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è."
                        self.showingAlert = true
                    } else {
                        self.alertMessage = "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: –ö–æ–¥ \(httpResponse.statusCode). –û—Ç–≤–µ—Ç: \(jsonString.prefix(100))..."
                        self.showingAlert = true
                    }
                }
            } catch {
                // ‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏/–¥–æ–º–µ–Ω–∞
                await MainActor.run {
                    self.alertMessage = "‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ \(self.connectionSettings.serverAddress). –ü—Ä–∏—á–∏–Ω–∞: \(error.localizedDescription)"
                    self.showingAlert = true

                }
            }
        }
    }
    
    private func buildSearchURL(barcode: String) -> URL? {
        // –ë–∞–∑–æ–≤—ã–π –ø—É—Ç—å –æ—Å—Ç–∞–µ—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º
        let basePath = "/hs/ProductInformation/Info"
        
        var components = URLComponents()
        components.scheme = connectionSettings.protocolSelection.lowercased()
        components.host = connectionSettings.serverAddress
        components.port = connectionSettings.port
        components.path = "/\(connectionSettings.publicationName)\(basePath)"
        
        var queryItems = [
            URLQueryItem(name: "barcode", value: barcode)
        ]

        queryItems.append(
            URLQueryItem(name: "full", value: connectionSettings.isFullSpecific ? "true" : "false")
        )

        components.queryItems = queryItems

        return components.url
    }
    
    private func navigateToProductDetail(productString: String) {
        
        if #available(iOS 16.0, *) {
            // Use NavigationPath for iOS 16+
            let target = AppNavigationTarget(destinationID: "productDetail", productString: productString)
            coordinatorPath.wrappedValue?.append(AppNavigation.view(target))
        } else {
            // Use NavigationLink's isActive binding for iOS 15-
            isActiveLink = true
        }
    }
}
